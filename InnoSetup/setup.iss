; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Virtual_Paper"
#define MyAppVersion "0.3.0.0"
#define MyAppVersionText "0300"
#define MyAppPublisher "PaperHammer"
#define MyAppURL "https://github.com/PaperHammer/VirtualPaper"
#define MyAppExeName "VirtualPaper.exe"

[CustomMessages]
english.DeleteEverythigMsgBox=Do you want to delete data folder?
chinese.DeleteEverythigMsgBox=您要删除数据文件夹吗？

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{95F4CECE-7C7C-40E1-B485-07DA64D1905F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppMutex=Virtual:WALLPAPERSYSTEM
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppCopyright=Virtual@PaperHammer
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
OutputBaseFilename=virtualpaper_setup_x64_full_v{#MyAppVersionText}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupIconFile=Icons\virtualpaper.ico
WizardSmallImageFile=Themes\wizard_small.bmp
WizardImageFile=Themes\wizard_large.bmp
LicenseFile=License\LICENSE.txt
UninstallDisplayIcon={app}\{#MyAppExeName}
ArchitecturesInstallIn64BitMode=x64 ia64

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"; LicenseFile: "License\License.txt";
Name: "chinese"; MessagesFile: "Languages\ChineseSimplified.isl";

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
; Name: "windowsstartup";Description: "{cm:AutoStartProgram,{#MyAppName}}"

[Files]
Source: "D:\Virtuals\VirtualPaper\src\SourceCode\VirtualPaper\bin\Release\net8.0-windows10.0.19041.0\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Virtuals\VirtualPaper\src\SourceCode\VirtualPaper\bin\Release\net8.0-windows10.0.19041.0\*"; DestDir: "{app}"; Excludes: "*.pdb,*.xml,*.vshost.*,*.config"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
; Root: HKA; Subkey: "Software\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "VirtualPaper"; ValueData: """{app}\VirtualPaper.exe"""; Flags: uninsdeletevalue; Tasks:windowsstartup

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall; Check: AutoLaunch
;skipifsilent

[Code]
var
  isAlreadyInstalled: Boolean;

// event fired when the uninstall step is changed: https://stackoverflow.com/revisions/12645836/1
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  // if we reached the post uninstall step (uninstall succeeded), then...
  if CurUninstallStep = usPostUninstall then
  begin
    // query user to confirm deletion; if user chose "Yes", then...
    if SuppressibleMsgBox(ExpandConstant('{cm:DeleteEverythigMsgBox}')+ ' ' + ExpandConstant('{localappdata}\{#MyAppName}') + ' ?',
      mbConfirmation, MB_YESNO, IDNO) = IDYES
    then
      // deletion confirmed by user.
      begin
        // Delete the directory "C:\Users\<UserName>\AppData\Local\Virtual_Paper" and everything inside it
        DelTree(ExpandConstant('{localappdata}\{#MyAppName}'), True, True, True);
      end;
  end;
end;

//Uninstall previous install: https://stackoverflow.com/questions/2000296/inno-setup-how-to-automatically-uninstall-previous-installed-version
//note: Inno does not delete files, it just overwrites & keeps the old ones if they have different name..it can get accumulated when program structure change!
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;


/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;
  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      begin
        isAlreadyInstalled := True;
        Result := 3;
      end
    else
      begin
      isAlreadyInstalled := True;
      Result := 2;
      end
  end else
    isAlreadyInstalled := False;
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;

function ShouldInstallWallpapers: Boolean;
begin
    Result := not isAlreadyInstalled;
end;

//////////////////////////////////////////////////////////////////////
// Uninstaller promts user whether to close Virtual_Paper if running before proceeding.
function InitializeUninstall(): Boolean;
var
  ErrorCode: Integer;
begin
  if CheckForMutexes('Virtual:WALLPAPERSYSTEM') and
     (SuppressibleMsgBox('Application is running, do you want to close it?',
             mbConfirmation, MB_OKCANCEL, IDOK) = IDOK) then
  begin
    ShellExec('open','taskkill.exe','/f /im {#MyAppExeName}','',SW_HIDE,ewWaitUntilTerminated,ErrorCode);
  end;

  Result := True;
end;
//////////////////////////////////////////////////////////////////////
// Credits: https://github.com/domgho/InnoDependencyInstaller
// NetCoreCheck tool is necessary for detecting if a specific version of .NET Core/.NET 5.0 is installed: https://github.com/dotnet/runtime/issues/36479
// Source code: https://github.com/dotnet/deployment-tools/tree/master/src/clickonce/native/projects/NetCoreCheck
// Download netcorecheck.exe: https://go.microsoft.com/fwlink/?linkid=2135256
// Download netcorecheck_x64.exe: https://go.microsoft.com/fwlink/?linkid=2135504
function NetCoreNeedsInstall(version: String): Boolean;
var
	netcoreRuntime: String;
	resultCode: Integer;
begin
  // Example: 'Microsoft.NETCore.App', 'Microsoft.AspNetCore.App', 'Microsoft.WindowsDesktop.App'
  netcoreRuntime := 'Microsoft.WindowsDesktop.App'
	Result := not(Exec(ExpandConstant('{tmp}{\}') + 'netcorecheck.exe', netcoreRuntime + ' ' + version, '', SW_HIDE, ewWaitUntilTerminated, resultCode) and (resultCode = 0));
end;

function CmdLineParamNotExists(const Value: string): Boolean;
var
  I: Integer;  
begin
  Result := True;
  for I := 1 to ParamCount do
    if CompareText(ParamStr(I), Value) = 0 then
    begin
      Result := False;
      Exit;
    end;
end;

function AutoLaunch(): Boolean;
begin
 Result := CmdLineParamNotExists('/NOAUTOLAUNCH');
end;


